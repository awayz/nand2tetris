// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16 (a=instruction, b=aluOut, sel=instruction[15], out=toA); // C 指令时选择 alu 输出
    Mux   (a=true, b=instruction[5], sel=instruction[15], out=selA);
    ARegister (in=toA, load=selA, out=outA);
    And   (a=instruction[12], b=instruction[15], out=selAorM);
    Mux16 (a=outA, b=inM, sel=selAorM, out=aOrM);
    And   (a=instruction[4], b=instruction[15], out=selD);
    DRegister (in=aluOut, load=selD, out=outD);

    And   (a=instruction[11], b=instruction[15], out=selZx);
    And   (a=instruction[10], b=instruction[15], out=selNx);
    And   (a=instruction[9], b=instruction[15], out=selZy);
    And   (a=instruction[8], b=instruction[15], out=selNy);
    And   (a=instruction[7], b=instruction[15], out=selF);
    And   (a=instruction[6], b=instruction[15], out=selNo);
    ALU   (x=outD, y=aOrM, zx=selZx, nx=selNx, zy=selZy, ny=selNy, f=selF, 
           no=selNo, out=aluOut, zr=t1, ng=t2);
    And   (a=instruction[15], b=instruction[3], out=writeM);
	And16 (a=true, b=aluOut, out=outM);

	And   (a=instruction[2], b=instruction[15], out=j1);
	And   (a=instruction[1], b=instruction[15], out=j2);
	And   (a=instruction[0], b=instruction[15], out=j3);

	And   (a=j1, b=t2, out=andJ1);
	And   (a=j2, b=t1, out=andJ2);
	Or    (a=t1, b=t2, out=tmp);
	Not   (in=tmp, out=larger);
	And   (a=j3, b=larger, out=andJ3);
	Or    (a=andJ1, b=andJ2, out=orJ12);
	Or    (a=orJ12, b=andJ3, out=jump);
	PC    (in=outA, load=jump, inc=true, reset=reset, out[0..14]=pc);
	And16 (a=true, b=outA, out[0..14]=addressM);
}